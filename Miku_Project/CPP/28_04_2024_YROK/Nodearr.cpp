//Зв'язні списки
//Визначення
//Однозв'язний список - це колекція вузлів, де кожен вузол містить дані та посилання на наступний вузол у списку. 
// Це структура даних, яка дозволяє послідовний доступ до елементів. 
// Вона починається з голови та закінчується на вузлі, що вказує на nullptr.
//
//Двозв'язний список - подібний до однозв'язного, але кожен вузол містить посилання не тільки на наступний вузол, 
// а й на попередній.Це дозволяє двонаправлену навігацію по списку.
// Вузол для однозв'язного списку
//struct Node {
//    int data;       // Дані, збережені у вузлі
//    Node* next;     // Вказівник на наступний вузол у списку
//};
//
//// Вузол для двозв'язного списку
//struct DoublyNode {
//    int data;           // Дані, збережені у вузлі
//    DoublyNode* prev;   // Вказівник на попередній вузол у списку
//    DoublyNode* next;   // Вказівник на наступний вузол у списку
//};

//Операції
//Вставка : Можна вставити новий елемент у будь - яку позицію списку, але найчастіше вставка відбувається на початок або в кінець.
// Вставка в однозв'язний список вимагає проходження по списку до потрібного місця, крім випадку, коли вставка відбувається на початок.
//Видалення : Видалення елемента також може відбуватися в будь - якій частині списку.
// Для видалення потрібно знайти вузол перед цільовим вузлом(у двозв'язному списку це легше здійснити).
// Обхід: Обхід здійснюється шляхом послідовного проходження через вказівники на наступні вузли до досягнення кінця списку.
// Сценарії використання
// Зв'язні списки кращі за масиви у випадках:
//
// Динамічність : Коли необхідна змінна довжина даних.
// Вставка та видалення : Коли потрібні часті вставки та видалення, особливо в середині колекції даних.
// Пам'ять: Вони не потребують спільної пам'яті, що ідеально при обмежених вимогах до пам'яті.


#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;

    Node(int val, Node* ptr) : data(val), next(ptr) {}
};

void printList(Node* root) {
    while (root != nullptr) {
        cout << root->data << " -> ";
        root = root->next;
    }
    cout << "nullptr" << endl;

int main() {

    Node* root = new Node(1, nullptr);
    root->next = new Node(2, nullptr);
    root->next->next = new Nod

    printList(root);

    while (root != nullptr) {
        Node* temp = root;
        root = root->next;
        delete temp;
    }

    return 0;
}